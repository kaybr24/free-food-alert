from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from apscheduler.schedulers.background import BackgroundScheduler
from werkzeug.utils import secure_filename
app = Flask(__name__)

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite

import cs304dbi as dbi
# import cs304dbi_sqlite3 as dbi

import random
import search
import helper
import insert
import profile
import register
import bcrypt
import information
from datetime import datetime, timedelta

# Initialize the scheduler for deleting the expired post
scheduler = BackgroundScheduler()

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True


@app.route('/')
def index(): 
    conn = dbi.connect()
    helper.remove_expired_posts(conn)
    all_posts = helper.display_posts(conn)
    ratings = helper.find_guide_ratings(conn)

    comments = {}
    for post in all_posts:
        post_id = post.get('post_id')
        if post_id:
            post_comments = helper.get_comments_for_post(conn, post_id)
            comments[post_id] = post_comments
    print("!!!!!!!!!!!!!!!!!!!!!")
    print(comments)
    ## create time since posted tags
    for post in all_posts:
        if 'post_date' in post:
            #date_posted = datetime.strptime(post['post_date'], '%y-%m-%d %H:%M:%S')
            post['age'] = helper.find_post_age(post['post_date'])
        else:
            post['age'] = ''
    # customize page based on login status
    if not session.get('logged_in', False): # if not logged in
        session['logged_in'] = False
    print('**********************************')
    for key in session:
        print(key, session.get(key))
    return render_template('main.html',title='Free Food Alert', comments = comments, search_results=all_posts, ratedGuides=ratings, cookie=session)

@app.route('/rate-post/', methods=['GET', 'POST'])
def rate_post():
    """
    handle rating posts
    TO-DO: make this into Ajax embedded in homepage
    """
    if request.method == 'POST':
        data=request.form
        dbi.conf('wffa_db')
        conn = dbi.connect()
        # check if they are rating themselves
        if data.get('guide') == data.get('user'):
            flash(f"You can not rate yourself")
            return redirect(url_for('index'))
        else:
            helper.insert_rating(conn, data)
            flash(f"You rated {data.get('guide')}'s post {data.get('stars')} out of 5 stars")
            return redirect(url_for('index'))
    else: # request.method == 'GET':
        # go back
        return redirect(url_for('index'))

@app.route('/search/', methods = ['GET', 'POST'])
def search_posts():
    '''
    Handles searching of posts based on specified search criteria
    '''
    locations = information.locations
    if not session.get('logged_in', False): # if not logged in
        session['logged_in'] = False
    possible_allergens = information.possible_allergens

    if request.method == 'POST':
        building = request.form.getlist('building')
        allergens = request.form.getlist('allergens')
        date_posted = request.form['date_posted']

        search_information = {'building': building, 
                                'allergens': allergens,
                                'date_posted': date_posted}
        conn = dbi.connect()
        data = search.search_for_post(conn, search_information)
        return render_template('search_results.html', title='Matching Food Posts', cookie=session, data=data)
    return render_template('search_form.html', title='Filter Food Posts', cookie=session, locations=locations, possible_allergens=possible_allergens)


@app.route('/insert', methods=['GET', 'POST'])
def new_post():
    '''
    Create a new post with given information
    '''
    if not session.get('logged_in', False): # if not logged in
        session['logged_in'] = False
        flash("You must be logged in to access this page")
        return redirect(url_for('user_profile'))
    conn = dbi.connect()
    user_email = session.get('username')
    user_information = profile.get_user_info(conn, user_email)
    food_guide_status = user_information['food_guide']

    if food_guide_status != 1:
        flash("Please become a food guide ")
        return redirect(url_for('user_profile'))

    if request.method == 'POST':

        # Handle optional image upload
        food_image = request.files['food_image'] if 'food_image' in request.files else None

        # Insert into the database
        post_date = datetime.now()
        conn1 = dbi.connect()
        insert.insert_post(conn1, post_date, request.form)
        # insert.insert_post(conn, user_email, food_description, post_date, expiration_date, room_number, building, allergens)
        # insert.insert_post(conn, user_email, food_name, food_description, post_date, allergens, expiration_date, building, room_number)
        conn2 = dbi.connect()
        all_posts = helper.display_posts(conn2)

        conn3 = dbi.connect()
        insert.update_user_post_count(conn3, user_email)

        # Redirect to a success page or any other page
        return redirect(url_for('index'))

    # Render the form template for GET requests
    return render_template('new_post_form.html', title='Insert New Food Posting', cookie=session, possible_allergens=information.possible_allergens)

@app.route('/registration', methods=['GET', 'POST'])
def registration():
    '''
    Register a new user and update the database
    '''
    if request.method == 'POST':
        # Retrieve form data
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        full_wellesley_email = request.form['wellesley_email']
        wellesley_email = full_wellesley_email.split('@')[0]
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        terms_checkbox = request.form.get('terms_checkbox')
        full_name = request.form['full_name']
        date = request.form['date']

        #deal with password encrypting
        hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        stored = hashed.decode('utf-8')

        # Check if the password and confirm_password match
        if password != confirm_password:
            flash('Passwords do not match')
            return render_template('register_form.html', title='Register as a User', cookie=session, error='Passwords do not match')

        # Check if the terms and conditions checkbox is checked
        if not terms_checkbox:
            flash('Please agree to the terms and conditions')
            return render_template('register_form.html', title='Register as a User', cookie=session, error='Please agree to the terms and conditions')
        
        # Check if user exists
        conn1=dbi.connect()
        existing_user = register.check_user_exists(conn1, wellesley_email)
        if existing_user:
            flash('User already exists. Please login.')
            return render_template('register_form.html', title='Register as a User', cookie=session, error='User already exists. Please login.')
        
        conn2=dbi.connect()
        result = register.register_user(conn2, full_name, wellesley_email, hashed, date)
        if result:
            # Redirect to a success page or (currently) login page
            flash(f"Registered user {wellesley_email}")
            session['username'] = wellesley_email
            session['uid'] = wellesley_email
            session['logged_in'] = True
            session['visits'] = 1
            return redirect(url_for('index'))
        else:
            flash("Registration failed. Please try again.")
            return render_template('register_form.html', title='Register as a User', cookie=session, error='Registration failed. Please try again.') # where should this show?

    else:
        # Render the registration form for GET requests
        return render_template('register_form.html', title='Register as a User', cookie=session, error=None)

"""
Lets users become food guides (ie, food guide column for user becomes a 1)
"""
@app.route('/become_food_guide', methods=['POST'])
def become_food_guide():
    '''
    Allow a user to become a food guide and make posts.
    '''
    # Get the user's email from the session
    user_email = session.get('username')
    print(user_email)
    if not user_email:
        #user isn't logged in
        return redirect(url_for('login'))  # Redirect to login page

    # Update the user's food_guide status in the database
    conn = dbi.connect()
    profile.update_food_guide_status(conn, user_email)

    return redirect(url_for('user_profile'))


@app.route('/user_profile')
def user_profile():
    '''
    Gets user information for a profile page
    '''
    #get user email from session
    user_email = session.get('username')

    if not user_email: #not logged in
        return redirect(url_for('login'))

    # Get user data from the database (replace with your logic)
    conn = dbi.connect()
    user_data = profile.get_user_info(conn, user_email)

    if not user_data:
        return "User not found."

    return render_template('profile.html', title='View Profile', cookie=session, user=user_data)



@app.route('/login', methods=['GET', 'POST'])
def login():
    '''
    Allows users to login to the website.
    '''
    if request.method == 'POST':
        user_email = request.form['user_email']
        password = request.form['password']

        # Validate user 
        conn = dbi.connect()
        user_info = profile.validate_user(conn, user_email, password)
        if user_info: # the user exists
            # Set user_email in the session
            # session['user_email'] = user_email
            stored = user_info['password']
            hashed2 = bcrypt.hashpw(password.encode('utf-8'),
                            stored.encode('utf-8'))
            hashed2_str = hashed2.decode('utf-8')
            if hashed2_str == stored:
                flash('successfully logged in as '+ user_email)
                session['username'] = user_email
                session['uid'] = user_info['user_email']
                session['logged_in'] = True
                session['visits'] = 1
                # Redirect to the user profile page
                return redirect( url_for('user_profile') )
            else:
                flash('login incorrect. Try again or join') #  incorrect password
                return redirect(url_for('index'))

        else: # incorrect username
            flash('login incorrect. Try again or join')
            return redirect(url_for('index'))
    else:
        # Render the login form for GET requests
        print("***************recieved GET login request")
        return render_template('login.html', title='Log Into Free Food Alert', cookie=session)

@app.route('/add_comment', methods=['POST'])
def add_comment():
    if request.method == 'POST':
        data = request.form
        print('data')
        print(data)
        post_id = data.get('post_id')
        user_email = session.get('username')
        comment_text = data.get('comment_text')

        if not post_id:
            flash("unable to comment")
            return redirect(url_for('index'))
        if not comment_text:
            flash('please provide comment text')
            return redirect(url_for('index'))
       
        # Insert the comment into the database
        conn = dbi.connect()
        helper.insert_comment(conn, post_id, user_email, comment_text)
        
        flash('Comment added successfully.')
        return redirect(url_for('index'))

@app.route('/logout')
def logout():
    session.clear()  # Clear all session variables
    flash('You have been logged out.')
    return redirect(url_for('index'))

# Remove expired posts every 24 hours
@scheduler.scheduled_job('interval', hours=24)
def remove_expired_posts_job():
    conn = dbi.connect()
    helper.remove_expired_posts(conn)
    print('Expired posts have been removed.')

# Start the scheduler
scheduler.start()

if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'wffa_db' 
    print('will connect to {}'.format(db_to_use))
    dbi.conf(db_to_use)
    app.debug = True
    app.run('0.0.0.0',port+1)
## some helper functions
import cs304dbi as dbi
from datetime import datetime, timedelta

def display_posts(conn):
    """
    returns a list of all active posts as dictionaries
    """
    curs = dbi.dict_cursor(conn)
    # atomic reads should be thread-safe
    curs.execute("""
        select `post_id`, `user_email`, `description`, `post_date`, 
        date(`expiration_date`) as 'expiration', `location`, `building`, `allergens`
        from post
        order by `post_date` desc;
    """)
    posts = curs.fetchall()
    return posts

def find_guide_ratings(conn, specific_guide=None):
    '''
    if no specific_guide is specified, returns a dictionary of [avgrating, count(ratings)] for each guide
    if a specific_guide is specified, returns a dictionary with one element (the rating, count pair for that guide)
    '''
    curs = dbi.dict_cursor(conn)
    rated_guides = {}
    if specific_guide:
        curs.execute("""select avg(rating), count(rating) from rating where guide_email like %s;""",
            [specific_guide])
        rating = curs.fetchone()
        rated_guides = {specific_guide: [float(rating.get('avg(rating)')), float(rating.get('count(rating)'))]}
    else:
        # atomic read should be thread-safe
        curs.execute("""select avg(rating), guide_email, count(rating)
            from rating 
            group by guide_email;
            """)
        rating = curs.fetchall()
        for guideDict in rating:
            guide = guideDict.get('guide_email')
            stars = guideDict.get('avg(rating)')
            count = guideDict.get('count(rating)')
            if stars:
                rated_guides[guide] = [float(stars), int(count)]
            # else:  
            #     rated_guides[guide] = [0, 0]
    return rated_guides

def insert_rating(conn, rating):
    """
    given the username, food guide and star rating as a dictionary, 
    insert the new rating into the database
    """
    curs = dbi.dict_cursor(conn)
    # atomic insert should be thread-safe
    query = """insert into rating(`post_id`, `guide_email`, `rater_email`, `rating`)
        values (%s, %s, %s, %s)
        on duplicate key update
        `rating` = %s;""" # change primary key so this works
    values = [
        rating.get('postID'), 
        rating.get('guide'),
        rating.get('user'),
        rating.get('stars'),
        rating.get('stars')
        ]
    curs.execute(query, values)
    conn.commit()

def find_post_age(post_date):
    """given the age of a post, return a (number, string) pair
    representing the age and time units of the post"""
    today = datetime.now()
    delta = today - post_date
    dpm = 7*52.143/12 # days per month
    if delta.days > dpm:
        if delta.days//dpm == 1:
            return ('1 month')
        else:
            return (str(int(delta.days//dpm)) +' months')
    elif delta.days > 7:
        if delta.days//7 == 1:
            return ('1 week')
        else:
            return (str(delta.days//7) +' weeks')
    elif delta.days > 0:
        if delta.days == 1:
            return ("1 day")
        else:
            return (str(delta.days) + ' days')
    elif delta.seconds > 3600:
        if delta.seconds//3600 == 1:
            return('1 hour')
        else:
            print(today, post_date, delta.seconds/3600)
            return (str(delta.seconds//3600) + ' hours')
    elif delta.seconds > 60:
        if delta.seconds//60 == 1:
            return('1 minute')
        else:
            return (str(delta.seconds//60) + ' minutes')
    else:
        if delta.seconds == 1:
            return ('1 second')
        else:
            return (str(delta.seconds) + ' seconds')

def remove_expired_posts(conn):
    """
    Remove expired posts from the database.
    """
    curs = dbi.dict_cursor(conn)
    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    query = """
        DELETE FROM post
        WHERE expiration_date < %s
    """
    #curs.execute("DELETE FROM rating WHERE post_id IN (SELECT post_id FROM post WHERE expiration_date < %s)", (current_date,))
    # atomic delete should be thread-safe
    curs.execute(query, [current_date])
    conn.commit()
    
def insert_comment(conn, post_id, user_email, comment):
    '''
    Inserts comment to a post into table
    '''
    curs = dbi.dict_cursor(conn)
    now = datetime.now()
    commentDate = now.strftime('%Y-%m-%d %H:%M:%S')
    # atomic insert should be thread-safe
    curs.execute('''insert into comments(post_id, user_email, comment, date)
                    values(%s, %s, %s, %s)''',
                    [post_id, user_email, comment, commentDate])

    # query = "INSERT INTO comments (post_id, user_email, comment, date) VALUES ((%s, %s, %s, %s)"
    # values=[post_id, user_email, comment, commentDate]
    # curs.execute(query, values)
    conn.commit()

def get_comments_for_post(conn, post_id):
    '''
    gets the comments for a post
    '''
    curs = dbi.dict_cursor(conn)
    # atomic read should be thread-safe
    query = "SELECT * FROM comments WHERE post_id=%s ORDER BY date DESC"
    curs.execute(query, [post_id])
    return curs.fetchall()



if __name__ == '__main__':
    db_to_use = 'wffa_db' 
    print('will connect to {}'.format(db_to_use))
    dbi.conf(db_to_use)
    conn = dbi.connect()
    # testing find_post_age()
    time = datetime(2023, 10, 23)
    print(find_post_age(time))
    # testing find_guide_ratings()
    print(find_guide_ratings(conn))
    print(find_guide_ratings(conn, 'kb102'))
    #print(display_posts(conn))import cs304dbi as dbi

def insert_post(conn, post_date, information):
    curs = dbi.dict_cursor(conn)
    full_user_email = information['user_email']
    user_email = full_user_email.split('@')[0]
    # food_name = information['food_name']
    food_description = information['food_description']
    allergens = information.getlist('allergens')
    
    expiration_date = information['expiration_date']
    building = information['building_dropdown']
    room_number = information['room_number']


    curs.execute('''insert into post(user_email, description, post_date, expiration_date, location, building, allergens)
                    values(%s, %s, %s, %s, %s, %s, %s)''',
                    [user_email, food_description, post_date, expiration_date, room_number, building, ','.join(allergens)])
    conn.commit()

def update_user_post_count(conn, user_email):
    curs = conn.cursor()
    query = "SELECT COUNT(*) FROM post WHERE user_email=%s"
    curs.execute(query, (user_email,))
    posts = curs.fetchone()[0]

    update_post_count = "UPDATE user SET post_count = %s where user_email = %s"
    curs.execute(update_post_count, (posts, user_email))

    conn.commit()import cs304dbi as dbi

def update_food_guide_status(conn, user_email):
    curs = dbi.dict_cursor(conn)
    # Update the user's food_guide status to 1
    curs.execute("UPDATE user SET food_guide = 1 WHERE user_email = %s", [user_email])
    conn.commit()

def get_user_info(conn, user_email):
    curs = dbi.dict_cursor(conn)
    curs.execute("SELECT * FROM user WHERE user_email = %s", [user_email])
    user_data = curs.fetchone()
    return user_data

def validate_user(conn, user_email, password):
    curs = dbi.dict_cursor(conn)
    curs.execute('''SELECT user_email, password
                    from user where user_email = %s''', [user_email])
    user = curs.fetchone()
    return user

# if __name__ == '__main__':
#     db_to_use = 'wffa_db' 
#     print('will connect to {}'.format(db_to_use))
#     dbi.conf(db_to_use)
#     conn = dbi.connect()
#     result = validate_user(conn, 'rd100', '')
#     print(result)
#     if None:
#         print("None is true")
#     elif result:
#         print("dictionary is true")
#     else:
#         print("Only True is true")#Kayley's search file with queries 
import cs304dbi as dbi
from datetime import datetime

legalAllergens =['soy', 'peanuts', 'dairy', 'gluten', 'eggs', 'shellfish', 'nuts', 'sesame']
legalBuildings = ['Acorns', 'Alumnae Hall', 'Athletic Maintenance Facility', 'Bates Hall', 
    'Beebe Hall', 'Billings', 'Boathouse', 'Campus Police Headquarters', 'Cazenove Hall', 
    'Cedar Lodge', 'Cervantes', 'Cheever House', 'Child Study Center', 'Claflin Hall', 
    'Collins Cinema', 'Continuing Education Office', 'Davis Hall', 'Davis Museum', 
    'Davis Parking Facility', 'Day Care Center', 'Distribution Center', 'Dower House', 
    'East Lodge', 'Fiske House', 'Founders Hall', 'Freeman Hall', 'French House - Carriage', 
    'French House - Main', 'Golf House', 'Green Hall', 'Grounds', 'Hallowell House', 'Harambee House', 
    'Hemlock', 'Homestead', 'Horton House', 'Instead', 'Jewett Art Center', 'Keohane Sports Center', 
    'Lake House', 'Library', 'Lulu Chow Wang Campus Center', 'Margaret Ferguson Greenhouses', 
    'McAfee Hall', 'Motor Pool', 'Munger Hall', 'Nehoiden House', 'Observatory', 'Orchard Apts', 
    'Pendleton Hall East', 'Pendleton Hall West', 'Physical Plant', 'Pomeroy Hall', 
    "President's House", 'Ridgeway Apts', 'Schneider Center', 'Science Center', 'Service Building', 
    'Severance Hall', 'Shafer Hall', 'Shakespeare', 'Shepard House', 'Simpson Hall', 'Simpson West', 
    'Slater International Center', 'Stone Center', 'Stone Hall', 'Tower Court East', 'Tower Court West',
     'Trade Shops Building', 'Tau Zeta Epsilon', 'Waban House', 'Weaver House', 'Webber Cottage', 
     'Wellesley College Club', 'West Lodge', 'Whitin House', 'Zeta Alpha House']

def search_for_post(conn, searched_item):
    """
    Given a dictionary if items searched for by the user, 
    finds if there are any posts with specified search
    and returns the post.
    """
    curs = dbi.dict_cursor(conn)

    query = "SELECT * FROM post WHERE"

    if len(searched_item['building'])>0:
        l = searched_item['building']
        locations=tuple(x for x in l)
        for place in locations:
            if place not in legalBuildings: # data check against list of locations
                print(place)
                raise ValueError("illegal building")
                return None
        query += " building IN {}".format(locations).replace(',)', ')')
    

    if len(searched_item['allergens'])>0:
        allergens = tuple(searched_item['allergens'])
        print("**************************************************")
        print(allergens)
        if 'building' in query:
            query += " AND"
        for allergen in allergens:
            if allergen not in legalAllergens: # see if in subset of allergens
                raise ValueError('illegal allergen')
                return None
            if allergen != allergens[0]:
                query += " AND"
            query += " (allergens not like '%{}%')".format(allergen) # this allergen is not listed

    if searched_item['date_posted']:
        formatted_date = datetime.strptime(searched_item['date_posted'], '%Y-%m-%d').strftime('%Y-%m-%d')

        if 'building' in query or 'allergens' in query:
            query += " AND post_date = '{}'".format(formatted_date)
        else:
            query += " post_date = '{}'".format(formatted_date)
      
    if query == "SELECT * FROM post WHERE":
        query = "SELECT * from post"
        
    print(query)
    curs.execute(query)

    data = curs.fetchall()
    return data

if __name__ == '__main__':
    db_to_use = 'wffa_db' 
    print('will connect to {}'.format(db_to_use))
    dbi.conf(db_to_use)
    conn = dbi.connect()
    if ("Bates Hall", "Tupelo Pool") not in legalBuildings: # data check against list of locations
        print("success")
    print(
        ("Bates Hall") not in legalBuildings,
        ("Bates Hall", "Tupelo Pool") not in legalBuildings,
        ("Bates Hall", "Lulu Chow Wang Campus Center") not in legalBuildings,
        ("Bates Hall",) not in legalBuildings
    )

locations=['Acorns', 'Alumnae Hall', 'Athletic Maintenance Facility', 'Bates Hall', 'Beebe Hall', 'Billings', 'Boathouse', 
    'Campus Police Headquarters', 'Cazenove Hall','Cedar Lodge', 'Cervantes', 'Cheever House', 'Child Study Center', 'Claflin Hall', 
    'Collins Cinema', 'Continuing Education Office', 'Davis Hall', 'Davis Museum', 
    'Davis Parking Facility', 'Day Care Center', 'Distribution Center', 'Dower House', 
    'East Lodge', 'Fiske House', 'Founders Hall', 'Freeman Hall', 'French House - Carriage', 
    'French House - Main', 'Golf House', 'Green Hall', 'Grounds', 'Hallowell House', 'Harambee House', 
    'Hemlock', 'Homestead', 'Horton House', 'Instead', 'Jewett Art Center', 'Keohane Sports Center', 
    'Lake House', 'Library', 'Lulu Chow Wang Campus Center', 'Margaret Ferguson Greenhouses', 
    'McAfee Hall', 'Motor Pool', 'Munger Hall', 'Nehoiden House', 'Observatory', 'Orchard Apts', 
    'Pendleton Hall East', 'Pendleton Hall West', 'Physical Plant', 'Pomeroy Hall', 
    "President's House", 'Ridgeway Apts', 'Schneider Center', 'Science Center', 'Service Building', 
    'Severance Hall', 'Shafer Hall', 'Shakespeare', 'Shepard House', 'Simpson Hall', 'Simpson West', 
    'Slater International Center', 'Stone Center', 'Stone Hall', 'Tower Court East', 'Tower Court West',
    'Trade Shops Building', 'Tau Zeta Epsilon', 'Waban House', 'Weaver House', 'Webber Cottage', 
    'Wellesley College Club', 'West Lodge', 'Whitin House', 'Zeta Alpha House']
possible_allergens = ['Soy', 'Peanuts', 'Dairy', 'Eggs', 'Shellfish', 'Nuts', 'Sesame', 'Gluten']import cs304dbi as dbi


def register_user(conn, full_name, wellesley_email, password, date):
    curs = dbi.dict_cursor(conn)
    
    curs.execute("""
        INSERT INTO user (name, user_email, password, join_date)
        VALUES (%s, %s, %s, %s);
    """, [full_name, wellesley_email, password, date])

    conn.commit()

    return True  # successfully registered

def check_user_exists(conn, wellesley_email):
    curs = dbi.dict_cursor(conn)
    # query = "SELECT * FROM users WHERE wellesley_email = %s", [wellesley_email]
    curs.execute('''SELECT * from user where user_email=%s ''', [wellesley_email])
    result = curs.fetchall()
    # result = dbi.query(conn, query, (wellesley_email,), result_set=True)
    
    # If the result set is not empty, the user exists
    return len(result) > 0
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="Kayla, Kayley, Jennifer">
    <title>{{ title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
            
{% block nav %}
<nav id ='navbar' class="navbar">
  {% if cookie.get('logged_in') %}
  <ul class="nav-links">
    <li><a href="{{url_for('index')}}">Home</a></li>
    <li><a href="{{url_for('search_posts')}}">Search</a></li>
    <li><a href="{{url_for('new_post')}}">Insert</a></li>
    <li><a href="{{ url_for('user_profile') }}">Profile</a></li>
  </ul>
  {% else %}
  <ul class="nav-links">
    <li><a href="{{url_for('index')}}">Home</a></li>
    <li><a href="{{url_for('search_posts')}}">Search</a></li>
    <li><a href="{{ url_for('registration') }}">Register</a></li>
    <li><a href="{{ url_for('user_profile') }}">Login</a></li>
  </ul>
  {% endif %}
</nav>
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
<h2>Rate a Post</h2>
{% for key in data %}
{{key, data.get(key)}}<br/>
{% endfor %}
{% endblock %}{% extends "base.html" %}

{% block main_content %}
<p>Click to <a href="{{ url_for('index') }}">return to the main page</a>.</p>

<h1>Form Data</h1>

<p>The form was submitted by {{method}}.</p>

<ul>
    {% for key in form_data.keys() %}
    <li><b class="key">{{key}}</b>
        <ul>
            {# getlist is a special method on Flask multi-dicts #}
            {# it gets the list of all values for that key #}
            {% for val in form_data.getlist(key) %}
            <li>{{val}}</li>
            {% endfor %}
        </ul></li>
    {% endfor %}
</ul>

{% endblock %}
{% extends "base.html" %}

{% block main_content %}
<p>Click to <a href="{{ url_for('index') }}">return to the main page</a>.</p>

<h1>Greetings {{name}}</h1>

<form method="post" action="">
    <p>Please tell us your <label for="username">name: <input type="text" name="username"></label></p>
    <p><input type="submit"></p>
</form>

{% endblock %}
{% extends "base.html" %}

{% block main_content %}

  <h2>Login</h2>
  <div class="format">
  <form action="{{ url_for('login') }}" method="post">
    <label for="user_email">Email:</label>
    <input type="text" id="user_email" name="user_email" required>
    <br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <br>
    <br>
    <div class="button-format">
    <input type="submit" value="Login">
  </div>
  </form>
</div>
{% endblock %}
{% extends "base.html" %}

{% block main_content %}
  <h2>Logout</h2>
  <form action="{{ url_for('logout') }}" method="get">
    <button type="submit">Logout</button>
  </form>
{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>Welcome to the Wellesley College Free Food Alert!</h1>

<p>Many events occur on Wellesley College's campus, oftentimes leaving behind free, excess food that students are not aware of. 
    Furthermore, there currently exists no efficient and easy way for students to communicate with each other and spread awareness 
    about extra food. Our application Food Alert attempts to solve this problem by creating an easy and centralized way for students
    to post news about free food on campus. </p>

<h2>Find free food on campus: </h2>

<div class="post-container">
{% for post in search_results %}
<div class="post">
<!-- <pre> -->
[picture goes here]<br/>
<strong>{{post.description}}</strong>
<br>
<em>{{post.age}} ago</em>
<br>
Location: {{post.building}}, {{post.location}}
<br>
{% if (post.allergens) %}
    Allergen Warning: contains {{post.allergens}}
    <br>
{% endif %}
Posted by: {{post.user_email}}
{% if ratedGuides.get(post.user_email, False) %}
    , who is rated {{ratedGuides.get(post.user_email)[0]}} out of 5 stars ({{ratedGuides.get(post.user_email)[1]}} ratings)
{% endif %}
<!-- </pre> -->
{% if cookie.get('logged_in') %}
<form method="post" action ="{{url_for('rate_post')}}">
    <input type="hidden" name="user" value="{{cookie.get('username')}}">
    <input type="hidden" name="guide" value="{{post.user_email}}">
    <input type="hidden" name="postID" value="{{post.post_id}}">
    <br/>
    <fieldset>
    <legend display:none> Rate this food post out of 5 stars </legend>
    {% for star in range(1,6) %}
    <label class="post-rating" style="font-weight: normal;">
        {{star}} 
        <input type="radio" name="stars" value="{{star}}">
    </label>
    {% endfor %}
    </fieldset>
    <input type="submit" value="rate this">
</form>
<br><br>
<div class="comments">
    <h3>Comments:</h3>
    {% if comments.get(post.post_id) %}
        {% for comment in comments[post.post_id] %}
            <p><strong>{{ comment.user_email }}:</strong> {{ comment.comment }}</p>
        {% endfor %}
    {% endif %}
</div>
    <br>

    <form method="post" action="{{url_for('add_comment')}}">
        <input type="hidden" name="post_id" value="{{ post.post_id }}">
        <div class="textbox">
            <label for="comment_text">Add a comment:</label>
            <textarea name="comment_text" id = "comment_text" placeholder="Add a comment" required></textarea>
        </div>
        <button type="submit">Add Comment</button>
    </form>
    


{% endif %}
</div>
{% endfor %}
</div>
{% endblock %}
{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
  <h1>Create a New Post</h1>

  <form action="{{ url_for('new_post') }}" method="post" enctype="multipart/form-data">
    <!-- User email -->
    <!-- autofilled -->
    
    <label for="user_email" aria-label="User Email"></label>
<input type="hidden" id="user_email" name="user_email" value="{{cookie.get('username')}}" required>
    <br>

    <!-- Food Item and Description -->
    <h2>Food Item and Description:</h2>

    <label for="food_description">Describe the food item:</label>
    <textarea id="food_description" name="food_description" rows="4" required></textarea>
    <br>

<h2>Allergens:</h2>
<label>Select known allergens (check all that apply):</label>
<br>

<label id="allergens" for="allergens">Allergens:</label><br>
{% for a in possible_allergens %}
<input type="checkbox" name="allergens" value="{{ a }}" id = "{{ a }}">
<label for="{{ a }}">{{ a }}</label><br>
{% endfor %}

       <br>

    <!-- Expiration Date -->
    <h2>Expiration Date:</h2>
    <label for="expiration_date">Date and Time:</label>
    <input type="datetime-local" id="expiration_date" name="expiration_date" required>
    <br>

    <!-- Building -->
    <h2>Building:</h2>
    <div class="location-menu">
    <label for="building_dropdown">Food building:</label>
    <select id="building_dropdown" name="building_dropdown" required>
    <option value="Acorns">Acorns</option>
    <option value="Alumnae Hall">Alumnae Hall</option>
    <option value="Athletic Maintenance Facility">Athletic Maintenance Facility</option>
    <option value="Bates Hall">Bates Hall</option>
    <option value="Beebe Hall">Beebe Hall</option>
    <option value="Billings">Billings</option>
    <option value="Boathouse">Boathouse</option>
    <option value="Campus Police Headquarters">Campus Police Headquarters</option>
    <option value="Cazenove Hall">Cazenove Hall</option>
    <option value="Cedar Lodge">Cedar Lodge</option>
    <option value="Cervantes">Cervantes</option>
    <option value="Cheever House">Cheever House</option>
    <option value="Child Study Center">Child Study Center</option>
    <option value="Claflin Hall">Claflin Hall</option>
    <option value="Collins Cinema">Collins Cinema</option>
    <option value="Continuing Education Office">Continuing Education Office</option>
    <option value="Davis Hall">Davis Hall</option>
    <option value="Davis Museum">Davis Museum</option>
    <option value="Davis Parking Facility">Davis Parking Facility</option>
    <option value="Day Care Center">Day Care Center</option>
    <option value="Distribution Center">Distribution Center</option>
    <option value="Dower House">Dower House</option>
    <option value="East Lodge">East Lodge</option>
    <option value="Fiske House">Fiske House</option>
    <option value="Founders Hall">Founders Hall</option>
    <option value="Freeman Hall">Freeman Hall</option>
    <option value="French House - Carriage">French House - Carriage</option>
    <option value="French House - Main">French House - Main</option>
    <option value="Golf House">Golf House</option>
    <option value="Green Hall">Green Hall</option>
    <option value="Grounds">Grounds</option>
    <option value="Hallowell House">Hallowell House</option>
    <option value="Harambee House">Harambee House</option>
    <option value="Hemlock">Hemlock</option>
    <option value="Homestead">Homestead</option>
    <option value="Horton House">Horton House</option>
    <option value="Instead">Instead</option>
    <option value="Jewett Art Center">Jewett Art Center</option>
    <option value="Keohane Sports Center">Keohane Sports Center</option>
    <option value="Lake House">Lake House</option>
    <option value="Library">Library</option>
    <option value="Lulu Chow Wang Campus Center">Lulu Chow Wang Campus Center</option>
    <option value="Margaret Ferguson Greenhouses">Margaret Ferguson Greenhouses</option>
    <option value="McAfee Hall">McAfee Hall</option>
    <option value="Motor Pool">Motor Pool</option>
    <option value="Munger Hall">Munger Hall</option>
    <option value="Nehoiden House">Nehoiden House</option>
    <option value="Observatory">Observatory</option>
    <option value="Orchard Apts">Orchard Apts</option>
    <option value="Pendleton Hall East">Pendleton Hall East</option>
    <option value="Pendleton Hall West">Pendleton Hall West</option>
    <option value="Physical Plant">Physical Plant</option>
    <option value="Pomeroy Hall">Pomeroy Hall</option>
    <option value="President's House">President's House</option>
    <option value="Ridgeway Apts">Ridgeway Apts</option>
    <option value="Schneider Center">Schneider Center</option>
    <option value="Science Center">Science Center</option>
    <option value="Service Building">Service Building</option>
    <option value="Severance Hall">Severance Hall</option>
    <option value="Shafer Hall">Shafer Hall</option>
    <option value="Shakespeare">Shakespeare</option>
    <option value="Shepard House">Shepard House</option>
    <option value="Simpson Hall">Simpson Hall</option>
    <option value="Simpson West">Simpson West</option>
    <option value="Slater International Center">Slater International Center</option>
    <option value="Stone Center">Stone Center</option>
    <option value="Stone Hall">Stone Hall</option>
    <option value="Tower Court East">Tower Court East</option>
    <option value="Tower Court West">Tower Court West</option>
    <option value="Trade Shops Building">Trade Shops Building</option>
    <option value="Tau Zeta Epsilon">Tau Zeta Epsilon</option>
    <option value="Waban House">Waban House</option>
    <option value="Weaver House">Weaver House</option>
    <option value="Webber Cottage">Webber Cottage</option>
    <option value="Wellesley College Club">Wellesley College Club</option>
    <option value="West Lodge">West Lodge</option>
    <option value="Whitin House">Whitin House</option>
    <option value="Zeta Alpha House">Zeta Alpha House</option>
    </select>
    <br>
  </div>

    <!-- Location -->
    <h2>Location:</h2>
    <label for="room_number">Room number:</label>
    <input type="text" id="room_number" name="room_number" required>
    <br>

    <!-- Picture(s) of the Food -->
    <!-- not safe yet
    <h2>Picture(s) of the Food (Optional):</h2>
    <label for="food_image">Upload image:</label>
    <input type="file" id="food_image" name="food_image" accept="image/*">
    <br>
    -->

    <!-- Submit Button -->
    <input type="submit" value="Submit">
  </form>
{% endblock %}
{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
<h2>User Profile</h2>
<p>Email: {{ user.user_email }}</p>
<p>Name: {{ user.name }}</p>
<p>Join Date: {{ user.join_date }}</p>
<p>Post Count: {{ user.post_count }}</p>

{% if user.food_guide != 1 %}
  <form action="{{ url_for('become_food_guide') }}" method="post">
    <button type="submit">Become a Food Guide</button>
  </form>
{% endif %}


<form action="{{ url_for('logout') }}">
<div class="button-format">
  <button type="submit">Logout</button>
</div>

{% endblock %}
  {% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
<h2>Rate a Post</h2>
<form method="post" action ="{{url_for('rate-one-post')}}">
    <input type="hidden" name="rating" value="user_email">
    <label class="post-rating" style="font-weight: normal;">
        1 
        <input type="radio" name="stars" value="1" style="display:none;">
    </label>
    <label class="post-rating" style="font-weight: normal;">
        2 
        <input type="radio" name="stars" value="2" style="display:none;">
    </label>
    <label class="post-rating" style="font-weight: normal;">
        3 
        <input type="radio" name="stars" value="3" style="display:none;">
    </label>
    <label class="post-rating" style="font-weight: normal;">
        4 
        <input type="radio" name="stars" value="4" style="display:none;">
    </label>
    <label class="post-rating" style="font-weight: normal;">
        5 
        <input type="radio" name="stars" value="5" style="display:none;">
    </label>
    <input type="submit" value="rate this" style="display: none;">
</form>
{% endblock %}{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
  <h1>Register with Food Alert</h1>
  <p><strong>Why register?</strong></p>
    <p>Creating an account with Free Food Alert lets you rate posts and food guides. You can also 
      insert and create posts yourself to let your peers know about free food you encounter!
    </p>

  <form action="{{ url_for('registration') }}" method="post">
    <div class="format">
    <!-- Personal Information -->
    <h2>Personal Information:</h2>
    
    <label for="first_name">First Name:</label>
    <input type="text" id="first_name" name="first_name" required>
    <br>
    <label for="last_name">Last Name:</label>
    <input type="text" id="last_name" name="last_name" required>
    <br>

    <label for="wellesley_email">Wellesley College Email (please enter your full wellesley email):</label>
    <input type="text" id="wellesley_email" name="wellesley_email" required>
    <br>

    <label for="password">Password (must be at least 8 characters):</label>
    <input type="password" id="password" name="password" minlength="8" required>
    <br>

    <label for="confirm_password">Confirm Password:</label>
    <input type="password" id="confirm_password" name="confirm_password" required>
    <br>

    <!-- Terms and Conditions -->


    <h2>Terms and Conditions:</h2>
<input type="checkbox" id="terms_checkbox" name="terms_checkbox" required>

<label for="terms_checkbox">
    I agree to abide by the following terms and conditions:
    <br>
    - I understand that my Food Alert account is for the purpose of sharing information about excess food on Wellesley College's campus and I will use it responsibly.
    <br>
    - I agree to treat all users with respect and maintain a positive and inclusive community.
    <br>
    - I will not engage in any form of discrimination, harassment, or harmful behavior on this platform.
    <br>
    - I understand that my contact information will be kept confidential and will not be shared with third parties.
    <br>
    - I understand that the website is not responsible for any allergies or adverse reactions related to the information shared on the site
    <br>
    I agree to the terms and conditions
</label>
    <br>


    <!-- Consent and Agreement -->
    <h2>Consent and Agreement:</h2>
    <p>I have read and understood the terms and conditions stated above and hereby agree to abide by them.</p>
    <label for="full_name">Your Full Name:</label>
    <input type="text" id="full_name" name="full_name" required>
    <br>

    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required>
    <br>
    <br>
    <!-- Submit Button -->
    <div class="button-format">
    <input type="submit" value="Submit">
  </div>
  </div>
  </form>
{% endblock %}
<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">

    <title>Search</title>
  
    <style>
        label, select, input {
            margin-bottom: 50px; 
        }
    </style>

</head> -->
{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
<body>
    <h1>Search for Food</h1>
    <form method="post" action="{{ url_for('search_posts') }}">
        <div class="location-menu">
        <label for="building_dropdown">Building:</label>
        <select id = building name="building" >
            <option value="" disabled selected hidden>select building(s)</option>
            {% for l in locations %}
            <option value="{{ l }}">{{ l }}</option>
            {% endfor %}

        </select><br>
    </div>
        <div class="format">
        <label id="allergens" for="allergens">Allergens:</label><br>
            {% for a in possible_allergens %}
            <input type="checkbox" name="allergens" value="{{ a }}" id = "{{ a }}">
            <label for="{{ a }}">{{ a }}</label><br>
            {% endfor %}
       <br>
       
        <label for="date_posted">Date Posted:</label>
        <input type="text" id="date_posted" name="date_posted" placeholder="YYYY-MM-DD">
    </div>
    
    <div class="button-format">
        <input type="submit" value="Search">
    </div>

    </form>
  
</body>
</html>
{% endblock %}<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">

    <title>Search Results</title>
</head> -->
{% extends "base.html" %}

{% block head_stuff %}
{% endblock %}

{% block main_content %}
<body>
    <h1>Search Results</h1>
    {% if data %}
        <table>
            <tr>
                <th>Building</th>
                <th>Allergens</th>
                <th>Description</th>
                <th>Posted By</th>
                <th>Date Posted</th>

            </tr>
            {% for row in data %}
                <tr>
                    <td>{{ row['building'] }}</td>
                    <td>{{ row['allergens'] }}</td>
                    <td>{{ row['description'] }}</td>
                    <td>{{ row['user_email'] }}</td>
                    <td>{{ row['post_date'] }}</td>
                </tr>
            {% endfor %}
        </table>
    {% else %}
        <p>No results found.</p>
    {% endif %}
    <br>
  
    <a href="/search">Back to Search</a>

</body>
</html>
{% endblock %}
{% extends "base.html" %}

{% block main_content %}
<p>Click to <a href="{{ url_for('index') }}">return to the main page</a>.</p>

<h1>Test Forms</h1>

<h2>POST form</h2>

<form method="post" action="{{url_for('formecho')}}">
<p><label>Name:
    <input required type="text" name="user" size="50" placeholder="Arthur, King of the Britons"></label></p>

<p><label>Quest:
    <textarea required name="quest" rows="3" cols="50" placeholder="To seek the grail"></textarea>
</label></p>

<p><label>Favorite Color?
        <select required name="color">
            <option value="">choose</option>
            <option>Blue</option>
            <option value="yellow">No, yel...</option>
        </select>
</label></p>

<p><input type="submit" value="process form">
</form>

<h2>GET form</h2>

<form method="get" action="{{url_for('formecho')}}">
<p><label>Name:
    <input required type="text" name="user" size="50" placeholder="Arthur, King of the Britons"></label></p>

<p><label>Quest:
    <textarea required name="quest" rows="3" cols="50" placeholder="To seek the grail"></textarea>
</label></p>

<p><label>Favorite Color?
        <select required name="color">
            <option value="">choose</option>
            <option>Blue</option>
            <option value="yellow">No, yel...</option>
        </select>
</label></p>

<p><input type="submit" value="process form">
</form>

{% endblock %}
/* the --color-header and others are CSS variables, which we access later. 
*/
HTML {
    --color-header: #fff;  /* color for H1-H6 and others. was deepskyblue but poor contrast. */
    --color-hilite: #b50000;  /* was red, but this avoids WAVE contrast errors */ 
    --color-focus: #56B929;
    --font-family: Verdana;
    font-family: var(--font-family)
}
body{
    background-color: #cad7eb
}
.location-menu {
    min-width: 350px;
    font-size: 1.15rem;
  }
  
  select {
    appearance: none;
    -webkit-appearance: none;
    width: 100%;
    font-size: 1.15rem;
    padding: 0.675em 6em 0.675em 1em;
    background-color: #fff;
    border: 1px solid #caced1;
    border-radius: 0.25rem;
    color: #000;
    cursor: pointer;
  }

/* For flashed messages; make them stand out using red and italics */

#messages {
    color: #D80032;
    font-style: italic;
}
table {
    border-collapse: collapse;
    width: 100%;
    color: #000000;
    background-color: rgba(215, 246, 250, 0.8);
}

th, td {
    border: 1px solid #ffffff;
    text-align: left;
    padding: 8px;
}
p{
    color:#000;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-size:120%;

}

h1 {
    font-size: 200%;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    color: #001B79;
}

h2, h3 {
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
   color: #001B79;
   font-size:180%;
}

.comments {
    max-height: 100px; 
    overflow-y: auto; 
    border: 1px solid #ccc; 
    padding: 10px; 
    font-size: 12px;
}

/* scroll bar */
.comments::-webkit-scrollbar {
    width: 12px; 
}

.comments::-webkit-scrollbar-thumb {
    background-color: #888; /* Color of the scrollbar thumb */
}
.textbox {
    width: 200px;
}

.allergens {
    color: #000;
}
.format {
    color: #000;
    font-size: 1.15rem;
}
.button-format {
    text-align: left; 
}

.button-format input[type="submit"] {
    background-color: #1134b5; 
    color: white;
    padding: 10px 20px;
    font-size: 16px; 
  
    border-radius: 5px; 
    cursor: pointer;
    transition: background-color 0.3s;
}

.button-format input[type="submit"]:hover {
    background-color: #001B79; 
}

.button-format button {
    background-color: #1134b5;
    color: white; 
    padding: 10px 20px; 
    font-size: 16px; 
    border: none; 
    border-radius: 5px; 
    cursor: pointer;
    transition: background-color 0.3s;
}

.button-format button[type="submit"]:hover {
    background-color: #001B79; 
}
.post-container{
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
}
.post{
    width: 32.5%;
    border: 1px solid #132043;
    padding: 15px;
    box-sizing: border-box;  
    overflow: auto;
    overflow-x: auto;
    color: #000;
    font-size: 110%;
    background-color: rgba(215, 246, 250, 0.6);
    font-size: 14px;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
}
.post-rating {
    display: flex;
    align-items: center;
    margin-top: 10px;
}
.post-rating label {
    cursor: pointer;
    margin-right: 5px; 
} 


.location-menu select {
    width: auto;
    display: inline-block;
    font-size: 1.15rem;
    padding: 0.675em 1em;  
    background-color: #ffffff;
    border: 1px solid #caced1;
    border-radius: 0.25rem;
    color: #000;
    cursor: pointer;
}
.navbar{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    color: #132043;
}

nav > ul {
    margin: 0;
    padding: 0;
    display: flex;
    list-style: none;
    align-items: center;
}

nav ul {
    list-style-type: none;
    margin: 0px;
    padding: 0px;
}

nav > ul > li {
    flex: 0 0 auto;
    width: 10em; 
}

nav button, nav a {
    display: block;
    box-sizing: border-box; 
    width: 100%;
    height: 40px;
    padding: 0px;
    padding-bottom: 5px;
    border-radius: 5px;
    cursor: pointer;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;;
    font-weight: bold;
    font-size: 1.4rem;
    color: #132043;
    
}

nav > ul > li > button , nav > ul > li > a {
    text-align: center;
}


nav li.right {
    margin-left: auto;
}

nav button:hover, button:focus, nav a:hover, nav a:focus {
    /* background-color: #bda8ed; */
    color: #fff;
}

use wffa_db;

insert into user(`user_email`, `name`, `join_date`, `food_guide`, `post_count`)
values
	('kb102', 'Kayla Brand', '11-06-23', True, 0),
    ('fy100', 'Jennifer Yu', '01-08-02', False, 0),
    ('kw102', 'Kayley Wang', '29-05-24', True, 30),
    ('mm999', 'Mickey Mouse', '23-12-10', False, 0);

insert into post(`post_id`, `user_email`, `description`, `post_date`, `expiration_date`, `location`, `building`, `allergens`)
values
    (NULL, 'kw102', 'marshmallows, chocolate, and graham crackers', NOW(), '23-11-30', 'Bates Living Room', 'Bates Hall', 'gluten'),
    (NULL, 'mm999', 'cheese', '00-01-01', NULL, 'room 413', 'Lulu Chow Wang Campus Center', NULL), 
    (NULL, 'kb102', 'bagels and lox', '23-11-20', '24-01-01', 'ASTRO conference room', 'Observatory', 'eggs,gluten,sesame,dairy');


insert into rating(`post_id`, `guide_email`, `rater_email`, `rating`)
values
    (3, 'kb102', 'fy100', 4),
    (3, 'kb102', 'mm999', 5);

insert into `picture`(`post_id`, `image_id`);
values
    (1, 0), /*ERROR: auto-increment is not working?*/
    (1, 1),
    (3, 2);

    -- MariaDB dump 10.19  Distrib 10.5.22-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: wffa_db
-- ------------------------------------------------------
-- Server version	10.5.22-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `user_email` varchar(30) DEFAULT NULL,
  `comment` text DEFAULT NULL,
  `date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`comment_id`),
  KEY `post_id` (`post_id`),
  KEY `user_email` (`user_email`),
  CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comments_ibfk_2` FOREIGN KEY (`user_email`) REFERENCES `user` (`user_email`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (3,7,'ss102','woohoo!','2023-12-05 20:39:13'),(4,7,'dw102','is it good?','2023-12-05 20:39:40'),(6,7,'dw102','blah blah','2023-12-05 20:40:50'),(8,7,'dw102','testing scrollabiltiy...','2023-12-05 20:42:09'),(9,7,'dw102','will the comments scroll?\r\n','2023-12-05 20:42:18'),(10,7,'dw102','pllleaassee scroll!','2023-12-05 20:42:29'),(11,7,'dw102','food webstie','2023-12-05 20:42:41'),(14,7,'dw102','testing comment size and how it will appear on the box.............................................................','2023-12-05 20:48:57'),(15,7,'dw102','add comment\r\n','2023-12-05 20:57:00'),(16,7,'mc104','oh, hello!\r\n','2023-12-06 00:04:37'),(17,10,'dw102','oh no!','2023-12-06 15:07:46'),(18,7,'tl001','The ice cubes aren\'t very flavorable \\(`0\')/','2023-12-10 15:39:07'),(19,12,'tl001','Where is Billings -1?','2023-12-10 15:49:38');
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `picture`
--

DROP TABLE IF EXISTS `picture`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `picture` (
  `post_id` int(11) DEFAULT NULL COMMENT 'post id that images are associated with',
  `image_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'unique id for image of food item',
  PRIMARY KEY (`image_id`),
  KEY `post_id` (`post_id`),
  CONSTRAINT `picture_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `picture`
--

LOCK TABLES `picture` WRITE;
/*!40000 ALTER TABLE `picture` DISABLE KEYS */;
/*!40000 ALTER TABLE `picture` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post` (
  `post_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Unique identifier for each food post',
  `user_email` varchar(30) DEFAULT NULL COMMENT 'email of guide who made the post',
  `description` text DEFAULT NULL COMMENT 'Detail field for the free food',
  `post_date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'when the post was created',
  `expiration_date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'when the post should be deleted',
  `location` varchar(30) DEFAULT NULL COMMENT 'Specific room location of the food',
  `building` enum('Acorns','Alumnae Hall','Athletic Maintenance Facility','Bates Hall','Beebe Hall','Billings','Boathouse','Campus Police Headquarters','Cazenove Hall','Cedar Lodge','Cervantes','Cheever House','Child Study Center','Claflin Hall','Collins Cinema','Continuing Education Office','Davis Hall','Davis Museum','Davis Parking Facility','Day Care Center','Distribution Center','Dower House','East Lodge','Fiske House','Founders Hall','Freeman Hall','French House - Carriage','French House - Main','Golf House','Green Hall','Grounds','Hallowell House','Harambee House','Hemlock','Homestead','Horton House','Instead','Jewett Art Center','Keohane Sports Center','Lake House','Library','Lulu Chow Wang Campus Center','Margaret Ferguson Greenhouses','McAfee Hall','Motor Pool','Munger Hall','Nehoiden House','Observatory','Orchard Apts','Pendleton Hall East','Pendleton Hall West','Physical Plant','Pomeroy Hall','President''s House','Ridgeway Apts','Schneider Center','Science Center','Service Building','Severance Hall','Shafer Hall','Shakespeare','Shepard House','Simpson Hall','Simpson West','Slater International Center','Stone Center','Stone Hall','Tower Court East','Tower Court West','Trade Shops Building','Tau Zeta Epsilon','Waban House','Weaver House','Webber Cottage','Wellesley College Club','West Lodge','Whitin House','Zeta Alpha House') DEFAULT NULL COMMENT 'Select one Wellesley campus building where the food is located',
  `allergens` set('soy','peanuts','dairy','gluten','eggs','shellfish','nuts','sesame') DEFAULT NULL COMMENT 'list of allergens present in the food',
  PRIMARY KEY (`post_id`),
  KEY `user_email` (`user_email`),
  CONSTRAINT `post_ibfk_1` FOREIGN KEY (`user_email`) REFERENCES `user` (`user_email`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (3,'kb102','bagels and lox','2023-11-20 05:00:00','2024-01-01 05:00:00','ASTRO conference room','Observatory','dairy,gluten,eggs,sesame'),(7,'mc104','ice cubes','2023-12-04 05:00:00','2023-12-25 19:09:00','Tower Dining Hall','Tower Court East',''),(10,'dw102','testing food!','2023-12-06 05:00:00','2024-01-04 15:01:00','111','Child Study Center','peanuts'),(12,'tl001','warm cheesy lemon ricotta Italian pancakes with raspberry jam','2023-12-10 15:49:15','2023-12-16 03:48:00','-1','Billings','dairy,gluten,eggs');
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rating`
--

DROP TABLE IF EXISTS `rating`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `rating` (
  `post_id` int(11) NOT NULL COMMENT 'ID of the post being rated',
  `guide_email` varchar(30) NOT NULL COMMENT 'email of the guide being rated',
  `rater_email` varchar(30) NOT NULL COMMENT 'email of the user making the rating',
  `rating` enum('1','2','3','4','5') DEFAULT NULL COMMENT 'star-value of the rating',
  PRIMARY KEY (`post_id`,`guide_email`,`rater_email`),
  KEY `guide_email` (`guide_email`),
  KEY `rater_email` (`rater_email`),
  CONSTRAINT `rating_ibfk_1` FOREIGN KEY (`guide_email`) REFERENCES `user` (`user_email`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `rating_ibfk_2` FOREIGN KEY (`rater_email`) REFERENCES `user` (`user_email`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `rating_ibfk_3` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `rating`
--

LOCK TABLES `rating` WRITE;
/*!40000 ALTER TABLE `rating` DISABLE KEYS */;
INSERT INTO `rating` VALUES (3,'kb102','dw102','5'),(3,'kb102','mc104','2'),(7,'mc104','tl001','1'),(10,'dw102','tl001','4');
/*!40000 ALTER TABLE `rating` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_email` varchar(30) NOT NULL COMMENT 'Unique identifier for each user',
  `name` varchar(50) DEFAULT NULL COMMENT 'Name of the user',
  `join_date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Joined date for the user',
  `password` char(60) DEFAULT NULL COMMENT 'bcrypt encoded password',
  `food_guide` tinyint(1) DEFAULT NULL COMMENT 'Whether user is a food guide or not',
  `post_count` int(11) DEFAULT NULL COMMENT 'number of posts overall',
  PRIMARY KEY (`user_email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES ('ap555','Alphie Pine','2023-12-02 05:00:00','$2b$12$cgRo6qrWgz6LHIGsJHhDC.ulYrOMA4kLLVUUQwTNjT23son8pYiou',NULL,NULL),('dw102','Dayle Wang','2023-12-06 15:12:32','$2b$12$McahQUPr8ckkIs7xJFMnd.55VGlCkL7KEBAbRtOwjFHrY35o9RFrq',1,4),('fy100','Jennifer Yu','2001-08-02 04:00:00',NULL,0,0),('fy101','Jennifer Yu','2023-12-02 05:00:00','$2b$12$.rSEMhtTs22lhggIdyoBSuRmcDcRZmzVANR3lzr5IA1XTchVeJ2Um',NULL,NULL),('kb102','Kayla Brand','2011-06-23 04:00:00',NULL,1,0),('kw102','Kayley Wang','2029-05-24 04:00:00',NULL,1,30),('mc104','Marsha Cooper','2023-12-04 19:09:33','$2b$12$smTDEVBsbKffqUA7zTHNc.5.wPjafi4dBXV0hfMBI64J2V/KYgXvO',1,2),('mm999','Mickey Mouse','2023-12-10 05:00:00',NULL,0,0),('oi60','Omashu III','2023-12-02 05:00:00','$2b$12$2zrHnfoV2taXt7qIyjt6e.XqHWF7Uws05H2cErPsZtpNB8a72uzjG',NULL,NULL),('sm105','Sam Man','2023-12-02 05:00:00','$2b$12$guitMyyLT6G79LKyh6DfFe/9b3U3tR.Sll9PdoYvO3obWDwfz1iei',NULL,NULL),('ss102','Susan Sally','2023-12-04 20:00:44','$2b$12$upU8IofsWYDPaDO9SOW5COXauiEHCjQvbouwjGvo/nClbrBwFm0te',1,2),('sw113','Sarai Willkuma','2023-12-02 05:00:00','$2b$12$zHIs8D4HK0y1xM9xWCT/4uvbTVoPRrVgaww7qE.FsCCpx2jmc0JCq',NULL,NULL),('ta111','Tahani Al-Jamil','2023-12-02 05:00:00','$2b$12$RIw.Y8kl91z2YgJIbKYVQuu.XADueVNdn.8BWJdmF.1TncVEtJ1h.',NULL,NULL),('test111','test111','2023-12-05 05:00:00','$2b$12$YFGimGZcc1RFjjhComugHOEkS0QwloLPv85uMw4m9nAYBbpB2lRku',NULL,NULL),('tl001','Tupelo Lane','2023-12-10 15:49:15','$2b$12$OLKOMcBZ77Cyzff/5VYmfuMRG9cnGcAH7pO2ZpGN91mEkzUlLvHBa',1,1),('tt111','test 1','2023-12-02 05:00:00','$2b$12$lHtA6zyV1dJH21Y73v0NQOXyZqx/7Rpf4JeseEAm3pkSmvvfk23kq',NULL,NULL);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-12-10 11:21:45
-- MariaDB dump 10.19  Distrib 10.5.22-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: wffa_db
-- ------------------------------------------------------
-- Server version	10.5.22-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `picture`
--

DROP TABLE IF EXISTS `picture`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `picture` (
  `post_id` int(11) DEFAULT NULL COMMENT 'post id that images are associated with',
  `image_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'unique id for image of food item',
  PRIMARY KEY (`image_id`),
  KEY `post_id` (`post_id`),
  CONSTRAINT `picture_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `picture`
--

LOCK TABLES `picture` WRITE;
/*!40000 ALTER TABLE `picture` DISABLE KEYS */;
INSERT INTO `picture` VALUES (1,2);
/*!40000 ALTER TABLE `picture` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post` (
  `post_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Unique identifier for each food post',
  `user_email` char(8) DEFAULT NULL COMMENT 'email of guide who made the post',
  `description` text DEFAULT NULL COMMENT 'Detail field for the free food',
  `post_date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'when the post was created',
  `expiration_date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'when the post should be deleted',
  `location` varchar(30) DEFAULT NULL COMMENT 'Specific room location of the food',
  `building` enum('Acorns','Alumnae Hall','Athletic Maintenance Facility','Bates Hall','Beebe Hall','Billings','Boathouse','Campus Police Headquarters','Cazenove Hall','Cedar Lodge','Cervantes','Cheever House','Child Study Center','Claflin Hall','Collins Cinema','Continuing Education Office','Davis Hall','Davis Museum','Davis Parking Facility','Day Care Center','Distribution Center','Dower House','East Lodge','Fiske House','Founders Hall','Freeman Hall','French House - Carriage','French House - Main','Golf House','Green Hall','Grounds','Hallowell House','Harambee House','Hemlock','Homestead','Horton House','Instead','Jewett Art Center','Keohane Sports Center','Lake House','Library','Lulu Chow Wang Campus Center','Margaret Ferguson Greenhouses','McAfee Hall','Motor Pool','Munger Hall','Nehoiden House','Observatory','Orchard Apts','Pendleton Hall East','Pendleton Hall West','Physical Plant','Pomeroy Hall','President''s House','Ridgeway Apts','Schneider Center','Science Center','Service Building','Severance Hall','Shafer Hall','Shakespeare','Shepard House','Simpson Hall','Simpson West','Slater International Center','Stone Center','Stone Hall','Tower Court East','Tower Court West','Trade Shops Building','Tau Zeta Epsilon','Waban House','Weaver House','Webber Cottage','Wellesley College Club','West Lodge','Whitin House','Zeta Alpha House') DEFAULT NULL COMMENT 'Select one Wellesley campus building where the food is located',
  `allergens` set('soy','peanuts','dairy','gluten','eggs','shellfish','nuts','sesame') DEFAULT NULL COMMENT 'list of allergens present in the food',
  PRIMARY KEY (`post_id`),
  KEY `user_email` (`user_email`),
  CONSTRAINT `post_ibfk_1` FOREIGN KEY (`user_email`) REFERENCES `user` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (1,'kw102','marshmallows, chocolate, and graham crackers','2023-11-20 15:45:55','2023-11-30 05:00:00','Bates Living Room','Bates Hall','gluten'),(2,'mm999','cheese','2000-01-01 05:00:00','2023-11-20 15:45:55','room 413','Lulu Chow Wang Campus Center',NULL),(3,'kb102','bagels and lox','2023-11-20 05:00:00','2024-01-01 05:00:00','ASTRO conference room','Observatory','dairy,gluten,eggs,sesame'),(4,'kw102','ham and cheese','2023-11-20 05:00:00','2023-11-20 21:58:00','floor 1','Campus Police Headquarters',''),(5,'kw102','bananas, apples, pineapples, bread, walnut cake','2023-11-20 05:00:00','2023-11-21 22:03:00','333','Cervantes',''),(6,'kw102','Walnut banana bread - 1 loaf available (10 slices)','2023-11-20 05:00:00','2023-11-20 22:04:00','123','Acorns',''),(7,'kw102','grape jelly','2023-11-20 05:00:00','2023-11-20 22:38:00','in front of police station','Davis Parking Facility',''),(8,'rd100','delicious crumbs from puff pastries, baguettes, and sandwich bread, oh la la','2023-11-21 05:00:00','2023-11-30 23:14:00','front bench','Boathouse',''),(10,'sanderso','packaged twizzlers left over from Halloween','2023-11-25 05:00:00','2024-01-01 04:59:00','W118','Science Center',''),(11,'kw102','fruit cake with walnuts','2023-11-29 05:00:00','2023-11-30 18:29:00','333','Davis Hall',''),(12,'kw102','peanuts testing insert...','2023-11-29 05:00:00','2023-11-29 19:40:00','000','Claflin Hall',''),(13,'kw102','dairy?','2023-11-29 05:00:00','2023-11-30 22:41:00','33333','Continuing Education Office',''),(14,'kw102','peanuts!','2023-11-29 05:00:00','2023-12-01 22:42:00','321','Continuing Education Office',''),(15,'kw102','peanuts','2023-11-29 05:00:00','2023-11-29 21:49:00','111','Collins Cinema','peanuts,nuts'),(16,'kw102','Hot coffee and hot chocolate is available. Some milk on the side too.','2023-11-29 05:00:00','2023-12-01 00:00:00','122','Wellesley College Club','dairy'),(17,'ka111','Carrots, celery, broccoli','2023-11-29 05:00:00','2023-12-01 13:47:00','111','Davis Parking Facility',''),(18,'ka111','tofu stew with some nuts inside it?','2023-11-29 05:00:00','2023-11-30 02:53:00','1234','Collins Cinema','nuts'),(19,'ka111','tofu stew with some nuts inside it?','2023-11-29 05:00:00','2023-11-30 02:53:00','1234','Collins Cinema','nuts');
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rating`
--

DROP TABLE IF EXISTS `rating`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `rating` (
  `rate_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'unique id of this rating, could be replaced with triple of guide, rater, and post',
  `post_id` int(11) DEFAULT NULL COMMENT 'ID of the post being rated',
  `guide_email` char(8) DEFAULT NULL COMMENT 'email of the guide being rated',
  `rater_email` char(8) DEFAULT NULL COMMENT 'email of the user making the rating',
  `rating` enum('1','2','3','4','5') DEFAULT NULL COMMENT 'star-value of the rating',
  PRIMARY KEY (`rate_id`),
  KEY `guide_email` (`guide_email`),
  KEY `rater_email` (`rater_email`),
  KEY `post_id` (`post_id`),
  CONSTRAINT `rating_ibfk_1` FOREIGN KEY (`guide_email`) REFERENCES `user` (`user_email`),
  CONSTRAINT `rating_ibfk_2` FOREIGN KEY (`rater_email`) REFERENCES `user` (`user_email`),
  CONSTRAINT `rating_ibfk_3` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `rating`
--

LOCK TABLES `rating` WRITE;
/*!40000 ALTER TABLE `rating` DISABLE KEYS */;
INSERT INTO `rating` VALUES (1,3,'kb102','fy100','4'),(2,3,'kb102','mm999','5'),(3,6,'kw102','rd100','3'),(4,2,'mm999','rd100','5'),(5,10,'sanderso','rd100','5'),(6,1,'kw102','rd100','5'),(7,14,'kw102','rd100','4'),(8,1,'kw102','rd100','5');
/*!40000 ALTER TABLE `rating` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_email` char(8) NOT NULL COMMENT 'Unique identifier for each user',
  `name` varchar(50) DEFAULT NULL COMMENT 'Name of the user',
  `password` char(60) DEFAULT NULL,
  `join_date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Joined date for the user',
  `food_guide` tinyint(1) DEFAULT NULL COMMENT 'Whether user is a food guide or not',
  `post_count` int(11) DEFAULT NULL COMMENT 'number of posts overall',
  PRIMARY KEY (`user_email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES ('fy100','Jennifer Yu',NULL,'2001-08-02 04:00:00',0,0),('ka111','Kelly Ann','$2b$12$SM8kIlFCc/wJUDrxPKQrOeVZ.03NCFc2yqghRQRcB8EE39sYzRh5K','2023-11-29 21:53:23',1,3),('kb102','Kayla Brand',NULL,'2011-06-23 04:00:00',1,0),('kw102','Kayley Wang',NULL,'2029-05-24 04:00:00',1,30),('mm999','Mickey Mouse',NULL,'2023-12-10 05:00:00',0,0),('rd100','Rubber Duck','$2b$12$k5ogteKD0UIZxX6xhL.Os.aPopUSVnpUoOBmVv7PRPFIuHn6zrMte','2023-12-01 22:50:55',1,NULL),('sanderso','Scott Anderson','$2b$12$XiCoWemtngIXqYabdvwCtefNk2TSY3.uY40xwZRZ8afhS10GuctMa','2023-11-25 05:00:00',NULL,NULL);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-12-01 21:35:06
use wffa_db;

drop table if exists picture; 
drop table if exists rating;
drop table if exists post;
drop table if exists user;

CREATE TABLE `user` (
  `user_email` varchar(30) PRIMARY KEY COMMENT 'Unique identifier for each user',
  `name` varchar(50) COMMENT 'Name of the user',
  `join_date` timestamp COMMENT 'Joined date for the user',
  `password` char(60) COMMENT 'bcrypt encoded password',
  `food_guide` boolean COMMENT 'Whether user is a food guide or not',
  `post_count` integer COMMENT 'number of posts overall'
);

CREATE TABLE `post` (
  `post_id` integer PRIMARY KEY not null AUTO_INCREMENT COMMENT 'Unique identifier for each food post',
  `user_email` varchar(30) COMMENT 'email of guide who made the post',
  `description` text COMMENT 'Detail field for the free food',
  `post_date` timestamp COMMENT 'when the post was created',
  `expiration_date` timestamp COMMENT 'when the post should be deleted',
  `location` varchar(30) COMMENT 'Specific room location of the food',
  `building` ENUM ('Acorns', 'Alumnae Hall', 'Athletic Maintenance Facility', 'Bates Hall', 
    'Beebe Hall', 'Billings', 'Boathouse', 'Campus Police Headquarters', 'Cazenove Hall', 
    'Cedar Lodge', 'Cervantes', 'Cheever House', 'Child Study Center', 'Claflin Hall', 
    'Collins Cinema', 'Continuing Education Office', 'Davis Hall', 'Davis Museum', 
    'Davis Parking Facility', 'Day Care Center', 'Distribution Center', 'Dower House', 
    'East Lodge', 'Fiske House', 'Founders Hall', 'Freeman Hall', 'French House - Carriage', 
    'French House - Main', 'Golf House', 'Green Hall', 'Grounds', 'Hallowell House', 'Harambee House', 
    'Hemlock', 'Homestead', 'Horton House', 'Instead', 'Jewett Art Center', 'Keohane Sports Center', 
    'Lake House', 'Library', 'Lulu Chow Wang Campus Center', 'Margaret Ferguson Greenhouses', 
    'McAfee Hall', 'Motor Pool', 'Munger Hall', 'Nehoiden House', 'Observatory', 'Orchard Apts', 
    'Pendleton Hall East', 'Pendleton Hall West', 'Physical Plant', 'Pomeroy Hall', 
    "President's House", 'Ridgeway Apts', 'Schneider Center', 'Science Center', 'Service Building', 
    'Severance Hall', 'Shafer Hall', 'Shakespeare', 'Shepard House', 'Simpson Hall', 'Simpson West', 
    'Slater International Center', 'Stone Center', 'Stone Hall', 'Tower Court East', 'Tower Court West',
     'Trade Shops Building', 'Tau Zeta Epsilon', 'Waban House', 'Weaver House', 'Webber Cottage', 
     'Wellesley College Club', 'West Lodge', 'Whitin House', 'Zeta Alpha House') 
     COMMENT 'Select one Wellesley campus building where the food is located',
  `allergens` SET ('soy', 'peanuts', 'dairy', 'gluten', 'eggs', 'shellfish', 'nuts', 'sesame') COMMENT 'list of allergens present in the food'
);

CREATE TABLE `rating` (
  `post_id` integer COMMENT 'ID of the post being rated',
  `guide_email` varchar(30) COMMENT 'email of the guide being rated',
  `rater_email` varchar(30) COMMENT 'email of the user making the rating',
  `rating` ENUM ('1', '2', '3', '4', '5') COMMENT 'star-value of the rating',
  PRIMARY KEY (`post_id`, `guide_email`, `rater_email`)
);

CREATE TABLE `picture` (
  `post_id` integer COMMENT 'post id that images are associated with',
  `image_id` integer not null AUTO_INCREMENT COMMENT 'unique id for image of food item',
  PRIMARY KEY (`image_id`),
  foreign key (post_id) references `post`(post_id) 
        on delete cascade on update cascade
);

ALTER TABLE `post` ADD FOREIGN KEY (`user_email`) REFERENCES `user` (`user_email`) on delete cascade on update cascade;

ALTER TABLE `rating` ADD FOREIGN KEY (`guide_email`) REFERENCES `user` (`user_email`) on delete cascade on update cascade;

ALTER TABLE `rating` ADD FOREIGN KEY (`rater_email`) REFERENCES `user` (`user_email`) on delete cascade on update cascade;

ALTER TABLE `rating` ADD FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) on update cascade;
